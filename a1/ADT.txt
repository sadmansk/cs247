BCode:
    a) BCode represents a building code, which is an value-based ADT. We will be using BCodes as label values for our building ADTs, they are immutable and objects with the same BCode are considered to be identical, so BCode itself is a value based ADT.
    b) Build the BCode ADT as value-based helps us provide equality, assignment, etc. operators. They can be useful when comparing them or assigning them to specific buildings' atributes.
    c)  Default Contructor: We need to define our own constructor to assign a building code to the object. So compiler-generated default constructor is not necessary.
        Destructor: Compiler-generated is acceptable since there aren't any special memory variables that need to be properly deallocated.
        Copy Constructor: We do not require deep copy since there are no pointers in this class. So using the compiler generated version is okay to use.
        Assignment Operator: Compiler-generated version works due to the same reasons as the copy constructor.
        Equality Operator: Have to implement our own since compiler does not generate one for us.

Building:
    a) Building is an entity-based ADT. It represents a real world entity, each building has a different identity and objects with the same attributes are not considered to be the same, which validates the Building ADT being an entity-based ADT.
    b) The entity-based implementation of the building ADT prevents us from using value operators like comparison, assignment, etc. This helps the design of the ADT since each objects are uniquely identifiable and "copying a building" is not a realistic action. The entity-based implementation also prohibits copy contructors and type conversions which are both impractical following the specification of the building ADT.
    c)  Default Contructor: Buildings need to be assigned an identity, so we need to implement our own constructor.
        Destructor: Compiler-generated is acceptable since there aren't any special memory variables that need to be properly deallocated.
        Copy Constructor: Copy is prohibited since this object is an entity.
        Assignment Operator: Assignment is prohibited since this object is an entity.
        Equality Operator: Have to implement our own since compiler does not generate one for us.

Collection:
    a) Collection is an entity-based ADT. Although cloning a collection is possible, a cloned collection with the same set of buildings would still be a different collection than the original and are not equal. Moreover, a collection of real-world objects can be considered to represent a real-world entity. Hence collection is an entity-based ADT.
    b) Keeping the entity-based design principles in mind, we can implement the cloning operation whilst prohibitting copy contructor, assignment and type conversions (a collection of buildings can only be a collection of buildings!). This way, we can make sure that all the operations on our collection ADT represents a real-world event, not an abstract one, which is the essence of entity-based ADTs.
    c)  Default Contructor: Default constructor works fine since the list will get set to NULL.
        Destructor: Collection contains pointers to nodes that wraps building objects, so we can't rely on the compiler-generated version since we need to define our own destructor.
        Copy Constructor: Since this is a real world entity, so deep copying is not realistic. Cloning can be considered as an alternative action corresponding to the shallow copy done by the compiler-generated version, so this version is okay to use.
        Assignment Operator: Real world entity, so prohibit assignments.
        Equality Operator: Have to implement our own since compiler does not generate one for us.

